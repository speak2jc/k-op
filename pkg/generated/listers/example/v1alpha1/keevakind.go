/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/speak2jc/k-op/pkg/apis/example/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KeevakindLister helps list Keevakinds.
type KeevakindLister interface {
	// List lists all Keevakinds in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Keevakind, err error)
	// Keevakinds returns an object that can list and get Keevakinds.
	Keevakinds(namespace string) KeevakindNamespaceLister
	KeevakindListerExpansion
}

// keevakindLister implements the KeevakindLister interface.
type keevakindLister struct {
	indexer cache.Indexer
}

// NewKeevakindLister returns a new KeevakindLister.
func NewKeevakindLister(indexer cache.Indexer) KeevakindLister {
	return &keevakindLister{indexer: indexer}
}

// List lists all Keevakinds in the indexer.
func (s *keevakindLister) List(selector labels.Selector) (ret []*v1alpha1.Keevakind, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Keevakind))
	})
	return ret, err
}

// Keevakinds returns an object that can list and get Keevakinds.
func (s *keevakindLister) Keevakinds(namespace string) KeevakindNamespaceLister {
	return keevakindNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KeevakindNamespaceLister helps list and get Keevakinds.
type KeevakindNamespaceLister interface {
	// List lists all Keevakinds in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Keevakind, err error)
	// Get retrieves the Keevakind from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Keevakind, error)
	KeevakindNamespaceListerExpansion
}

// keevakindNamespaceLister implements the KeevakindNamespaceLister
// interface.
type keevakindNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Keevakinds in the indexer for a given namespace.
func (s keevakindNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Keevakind, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Keevakind))
	})
	return ret, err
}

// Get retrieves the Keevakind from the indexer for a given namespace and name.
func (s keevakindNamespaceLister) Get(name string) (*v1alpha1.Keevakind, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("keevakind"), name)
	}
	return obj.(*v1alpha1.Keevakind), nil
}

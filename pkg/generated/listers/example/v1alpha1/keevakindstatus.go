/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/speak2jc/k-op/pkg/apis/example/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KeevakindStatusLister helps list KeevakindStatuses.
type KeevakindStatusLister interface {
	// List lists all KeevakindStatuses in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.KeevakindStatus, err error)
	// KeevakindStatuses returns an object that can list and get KeevakindStatuses.
	KeevakindStatuses(namespace string) KeevakindStatusNamespaceLister
	KeevakindStatusListerExpansion
}

// keevakindStatusLister implements the KeevakindStatusLister interface.
type keevakindStatusLister struct {
	indexer cache.Indexer
}

// NewKeevakindStatusLister returns a new KeevakindStatusLister.
func NewKeevakindStatusLister(indexer cache.Indexer) KeevakindStatusLister {
	return &keevakindStatusLister{indexer: indexer}
}

// List lists all KeevakindStatuses in the indexer.
func (s *keevakindStatusLister) List(selector labels.Selector) (ret []*v1alpha1.KeevakindStatus, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KeevakindStatus))
	})
	return ret, err
}

// KeevakindStatuses returns an object that can list and get KeevakindStatuses.
func (s *keevakindStatusLister) KeevakindStatuses(namespace string) KeevakindStatusNamespaceLister {
	return keevakindStatusNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KeevakindStatusNamespaceLister helps list and get KeevakindStatuses.
type KeevakindStatusNamespaceLister interface {
	// List lists all KeevakindStatuses in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.KeevakindStatus, err error)
	// Get retrieves the KeevakindStatus from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.KeevakindStatus, error)
	KeevakindStatusNamespaceListerExpansion
}

// keevakindStatusNamespaceLister implements the KeevakindStatusNamespaceLister
// interface.
type keevakindStatusNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KeevakindStatuses in the indexer for a given namespace.
func (s keevakindStatusNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.KeevakindStatus, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KeevakindStatus))
	})
	return ret, err
}

// Get retrieves the KeevakindStatus from the indexer for a given namespace and name.
func (s keevakindStatusNamespaceLister) Get(name string) (*v1alpha1.KeevakindStatus, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("keevakindstatus"), name)
	}
	return obj.(*v1alpha1.KeevakindStatus), nil
}

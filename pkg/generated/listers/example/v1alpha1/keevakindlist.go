/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/speak2jc/k-op/pkg/apis/example/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KeevakindListLister helps list KeevakindLists.
type KeevakindListLister interface {
	// List lists all KeevakindLists in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.KeevakindList, err error)
	// KeevakindLists returns an object that can list and get KeevakindLists.
	KeevakindLists(namespace string) KeevakindListNamespaceLister
	KeevakindListListerExpansion
}

// keevakindListLister implements the KeevakindListLister interface.
type keevakindListLister struct {
	indexer cache.Indexer
}

// NewKeevakindListLister returns a new KeevakindListLister.
func NewKeevakindListLister(indexer cache.Indexer) KeevakindListLister {
	return &keevakindListLister{indexer: indexer}
}

// List lists all KeevakindLists in the indexer.
func (s *keevakindListLister) List(selector labels.Selector) (ret []*v1alpha1.KeevakindList, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KeevakindList))
	})
	return ret, err
}

// KeevakindLists returns an object that can list and get KeevakindLists.
func (s *keevakindListLister) KeevakindLists(namespace string) KeevakindListNamespaceLister {
	return keevakindListNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KeevakindListNamespaceLister helps list and get KeevakindLists.
type KeevakindListNamespaceLister interface {
	// List lists all KeevakindLists in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.KeevakindList, err error)
	// Get retrieves the KeevakindList from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.KeevakindList, error)
	KeevakindListNamespaceListerExpansion
}

// keevakindListNamespaceLister implements the KeevakindListNamespaceLister
// interface.
type keevakindListNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KeevakindLists in the indexer for a given namespace.
func (s keevakindListNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.KeevakindList, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KeevakindList))
	})
	return ret, err
}

// Get retrieves the KeevakindList from the indexer for a given namespace and name.
func (s keevakindListNamespaceLister) Get(name string) (*v1alpha1.KeevakindList, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("keevakindlist"), name)
	}
	return obj.(*v1alpha1.KeevakindList), nil
}

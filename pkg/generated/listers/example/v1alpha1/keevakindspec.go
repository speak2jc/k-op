/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/speak2jc/k-op/pkg/apis/example/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KeevakindSpecLister helps list KeevakindSpecs.
type KeevakindSpecLister interface {
	// List lists all KeevakindSpecs in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.KeevakindSpec, err error)
	// KeevakindSpecs returns an object that can list and get KeevakindSpecs.
	KeevakindSpecs(namespace string) KeevakindSpecNamespaceLister
	KeevakindSpecListerExpansion
}

// keevakindSpecLister implements the KeevakindSpecLister interface.
type keevakindSpecLister struct {
	indexer cache.Indexer
}

// NewKeevakindSpecLister returns a new KeevakindSpecLister.
func NewKeevakindSpecLister(indexer cache.Indexer) KeevakindSpecLister {
	return &keevakindSpecLister{indexer: indexer}
}

// List lists all KeevakindSpecs in the indexer.
func (s *keevakindSpecLister) List(selector labels.Selector) (ret []*v1alpha1.KeevakindSpec, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KeevakindSpec))
	})
	return ret, err
}

// KeevakindSpecs returns an object that can list and get KeevakindSpecs.
func (s *keevakindSpecLister) KeevakindSpecs(namespace string) KeevakindSpecNamespaceLister {
	return keevakindSpecNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KeevakindSpecNamespaceLister helps list and get KeevakindSpecs.
type KeevakindSpecNamespaceLister interface {
	// List lists all KeevakindSpecs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.KeevakindSpec, err error)
	// Get retrieves the KeevakindSpec from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.KeevakindSpec, error)
	KeevakindSpecNamespaceListerExpansion
}

// keevakindSpecNamespaceLister implements the KeevakindSpecNamespaceLister
// interface.
type keevakindSpecNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KeevakindSpecs in the indexer for a given namespace.
func (s keevakindSpecNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.KeevakindSpec, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KeevakindSpec))
	})
	return ret, err
}

// Get retrieves the KeevakindSpec from the indexer for a given namespace and name.
func (s keevakindSpecNamespaceLister) Get(name string) (*v1alpha1.KeevakindSpec, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("keevakindspec"), name)
	}
	return obj.(*v1alpha1.KeevakindSpec), nil
}
